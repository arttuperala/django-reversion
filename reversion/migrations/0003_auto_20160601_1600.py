# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-01 16:00
from __future__ import unicode_literals

from collections import defaultdict
from django.db import DEFAULT_DB_ALIAS, migrations, models, router
from django.apps import apps as live_apps


def set_version_db(apps, schema_editor):
    """
    Updates the db field in all Version models to point to the correct write
    db for the model.
    """
    db_alias = schema_editor.connection.alias
    Version = apps.get_model("reversion", "Version")
    content_types = Version.objects.using(db_alias).order_by().values_list(
        "content_type_id",
        "content_type__app_label",
        "content_type__model"
    ).distinct()
    model_dbs = defaultdict(list)
    for content_type_id, app_label, model_name in content_types:
        # We need to be able to access all models in the project, and we can't
        # specify them up-front in the migration dependencies. So we have to
        # just get the live model. This should be fine, since we don't actually
        # manipulate the live model in any way.
        try:
            model = live_apps.get_model(app_label, model_name)
        except LookupError:
            # If the model appears not to exist, play it safe and use the default db.
            db = "default"
        else:
            db = router.db_for_write(model)
        model_dbs[db].append(content_type_id)
    # Update db field.
    # speedup for case when there is only default db
    if DEFAULT_DB_ALIAS in model_dbs and len(model_dbs) == 1:
        Version.objects.using(db_alias).update(db=DEFAULT_DB_ALIAS)
    else:
        for db, content_type_ids in model_dbs.items():
            Version.objects.using(db_alias).filter(
                content_type__in=content_type_ids
            ).update(db=db)


class Migration(migrations.Migration):

    dependencies = [
        ('reversion', '0002_auto_20141216_1509'),
    ]

    operations = [
        migrations.AlterField(
            model_name='version',
            name='object_id',
            field=models.CharField(help_text='Primary key of the model under version control.', max_length=191),
        ),
        migrations.AlterField(
            model_name='revision',
            name='date_created',
            field=models.DateTimeField(db_index=True, help_text='The date and time this revision was created.', verbose_name='date created'),
        ),
        migrations.AddField(
            model_name='version',
            name='db',
            field=models.CharField(null=True, help_text='The database the model under version control is stored in.', max_length=191),
        ),
        migrations.RunPython(set_version_db),
    ]
